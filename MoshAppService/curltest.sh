#!/bin/bash

# Note: Do not edit this file in Visual Studio; it seems to like 
# messing with the file encoding, rendering this script unusable.
# Instead use Notepad++, vim, nano, or basically any other text editor.

# Functions
function prompt {
  printf "\n\n-----\nPress <ENTER> to continue.\n-----\n"
  read
}
function clear {
  # Use Windows' clear screen command :p
  cmd /c cls
}
function entertocontinue {
  prompt
  clear
}
function die {
  echo $1
  exit 1
}
function write {
  printf "\n$1\n\n"
}

# Check command line arguments
if [[ -z $1 ]] || [[ -z $2 ]]; then
  write "Please specify the username and password to test.\nUsage: $0 <user> <pass>"
  exit
fi

clear

# First check if the required applications are installed
which curl > /dev/null 2>&1
if [ $? -ne 0 ]; then
  die "curl is not installed."
fi

which cmd > /dev/null 2>&1
if [ $? -ne 0 ]; then
  die "cmd is not installed. This script should really be run on Windows+Cygwin :p"
fi

which awk > /dev/null 2>&1
if [ $? -ne 0 ]; then
  die "awk is not installed."
fi

# Set to 1 to do initial test
RUNTEST=0

# Service hostname and port
HOST="http://localhost:9000"

# Curl options
CURL="curl -v"

JSON_HEADER="Content-Type: application/json"
FORM_HEADER="Content-Type: application/x-www-form-urlencoded"

POST="-X POST"
GET="-X GET"
PUT="-X PUT"
DELETE="-X DELETE"

TESTUSER=$1
TESTPASS=$2

USER_JSON="-d {\"userName\":\"$TESTUSER\",\"password\":\"$TESTPASS\"}"
USER_FORM="-d userName=$TESTUSER -d password=$TESTPASS"

if [ $RUNTEST -eq 1 ]; then
  # Login with JSON
  write "Login using application/JSON"
  $CURL $POST $HOST/authenticate $USER_JSON -H "$JSON_HEADER"

  entertocontinue

  # Login with "web form"
  write "Login using application/x-www-form-urlencoded"
  $CURL $POST $HOST/authenticate $USER_FORM -H "$FORM_HEADER"

  # Exit if login wasn't working properly
  if [ $? -ne 0 ]; then
    die "There was a problem logging in."
  fi

  entertocontinue
fi

write "Now logging in and using the returned session ID for the other features..."
write "URL: $HOST/authenticate\nData: $USER_JSON"

# Now that we know that we can login, let's use the session ID it gives us to test the other features
sessionId=$(curl $POST $HOST/authenticate $USER_JSON -H "$JSON_HEADER" | awk -F '"' '{print $4}')

if [ $? -ne 0 ] || [ $sessionId == "errorCode" ] || [ $sessionId == "" ]; then
 die "Error logging in. Please check service debug log for details."
fi

write "Logged in successfully!\nSession ID is $sessionId"
entertocontinue

CURL=curl
AUTH="-b ss-id=$sessionId"

function do_command {
  message="$1"
  host="$HOST$2"
  method="$3"
  verbose="$4"

  if [[ ! -z "$5" ]]; then
    data="-d '$5'"
  else
    data=""
  fi

  msg="$message\n\nURL: $host\nSession ID: $sessionId"

  if [[ ! -z "$data" ]]; then
    msg="$msg\nData: $5"
  fi

  write "$msg"

  sleep 0.1

  if [[ $verbose == true ]]; then
    # Filter out X-MiniProfiler-Ids header if it exists, as it
    # isn't really needed here and it clutters up the screen :p
    $CURL -v -X $method $host $AUTH $data 2>&1 | grep -v "X-MiniProfiler-Ids"
  else
    $CURL -X $method $host $AUTH $data
  fi

  prompt
}

do_command "Retrieve user information" "/users/0" "GET"
do_command "Retrieve team information" "/teams/0" "GET"
do_command "Retrieve team member information" "/users/1" "GET"
do_command "Try to retrieve information for user not in team" "/users/5" "GET" true
clear
do_command "Retrieve game information" "/games/0" "GET"
do_command "Retrieve task information" "/tasks/0" "GET"
clear
do_command "Check leaderboard (which will cache it; check the debug output)" "/leaderboard" "GET"
do_command "Check leaderboard again (which should not regenerate it)" "/leaderboard" "GET"
do_command "Check in to checkpoint" "/json/oneway/CheckIn" "POST" false '{"gameId":0,"taskId":0,"answer":"String"}'
do_command "Check leaderboard (which should have been invalidated by checkin)" "/leaderboard" "GET"
